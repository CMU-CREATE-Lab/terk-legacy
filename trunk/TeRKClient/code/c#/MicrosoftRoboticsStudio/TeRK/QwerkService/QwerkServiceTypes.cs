//------------------------------------------------------------------------------
// QwerkServiceTypes.cs
//
//     This code was generated by the DssNewService tool.
//
//------------------------------------------------------------------------------
using Microsoft.Dss.Core.Attributes;
using Microsoft.Ccr.Core;
using Microsoft.Dss.Core.DsspHttp;
using Microsoft.Dss.ServiceModel.Dssp;
using W3C.Soap;
using TeRK.components;
using TeRK.services;
using TeRK.components.servants;
using Contract=TeRK.client.qwerkservice.Contract;
using System.Drawing;
// [assembly : ContractNamespace(Contract.Identifier, ClrNamespace = "TeRK.client.qwerkservice")]

namespace TeRK.client.qwerkservice
   {
   public sealed class Contract
      {
      public const string Identifier = "http://schemas.tempuri.org/2006/08/qwerkservice.html";

      /// Prevent this class from being instantiated
      private Contract()
         {
         }
      }

    public class QwerkServiceOperations : PortSet<DsspDefaultLookup,
                                            DsspDefaultDrop,
                                            HttpGet,
                                            Get,
                                            Replace,
                                            Subscribe,
                                            RelayLogin,
                                            DirectLogin,
                                            GetVideoFrame,
                                            UpdateQwerkState,
                                            UpdateInputs,
                                            SetMotorSpeed,
                                            SetServoPositions,
                                            SetDigitalOut
                                            >
      {
      }

    public class Get : Microsoft.Dss.ServiceModel.Dssp.Get<GetRequestType, PortSet<QwerkServiceState, Fault>>
      {
      }

    public class Replace : Microsoft.Dss.ServiceModel.Dssp.Replace<QwerkServiceState, PortSet<DefaultReplaceResponseType, Fault>>
      {
      }

    public class Subscribe : Subscribe<SubscribeRequestType, PortSet<SubscribeResponseType, Fault>>{}

    public class UpdateQwerkState : Update<UpdateQwerkStateRequest, PortSet<DefaultUpdateResponseType, Fault>>
    {
        public UpdateQwerkState()
            : base(new UpdateQwerkStateRequest())
        {
        }
    }

    public class UpdateInputs : Update<UpdateInputsRequest, PortSet<DefaultUpdateResponseType, Fault>>
    {
        public UpdateInputs()
            : base(new UpdateInputsRequest())
        {
        }
    }
    
    public class RelayLogin : Update<RelayLoginRequest, PortSet<DefaultUpdateResponseType, Fault>>
    {
        public RelayLogin()
        {
            if (Body == null)
            {
                Body = new RelayLoginRequest();
            }
        }

        public RelayLogin(RelayLoginRequest login)
        {
            Body = login;
        }
    }

    public class DirectLogin : Update<DirectLoginRequest, PortSet<DefaultUpdateResponseType, Fault>>
    {
        public DirectLogin()
        {
            if (Body == null)
            {
                Body = new DirectLoginRequest();
            }
        }

        public DirectLogin(DirectLoginRequest login)
        {
            Body = login;
        }
    }

    public class GetVideoFrame : Get<GetVideoFrameRequest, PortSet<VideoFrameMessage, Fault>>
    {
        public GetVideoFrame()
            : base(new GetVideoFrameRequest())
        {            
        }
    }

    public class SetMotorSpeed : Update<SetMotorSpeedRequest, PortSet<DefaultUpdateResponseType, Fault>>
    {
        public SetMotorSpeed()
        {
            if (Body == null)
            {
                Body = new SetMotorSpeedRequest();
            }
        }

        public SetMotorSpeed(SetMotorSpeedRequest motorSpeed)
        {
            Body = motorSpeed;
        }
    }

    public class SetServoPositions : Update<SetServoPositionsRequest, PortSet<DefaultUpdateResponseType, Fault>>
    {
        public SetServoPositions()
        {
            if (Body == null)
            {
                Body = new SetServoPositionsRequest();
            }
        }

        public SetServoPositions(SetServoPositionsRequest servoPositions)
        {
            Body = servoPositions;
        }
    }

    public class SetDigitalOut : Update<SetDigitalOutRequest, PortSet<DefaultUpdateResponseType, Fault>>
    {
        public SetDigitalOut()
        {
            if (Body == null)
            {
                Body = new SetDigitalOutRequest();
            }
        }

        public SetDigitalOut(SetDigitalOutRequest digitalOut)
        {
            Body = digitalOut;
        }
    }

    [DataContract]
    public class QwerkServiceState
    {
        internal QwerkState _qwerkState;
        private long _ticks;
        private int _subscribers;

        public QwerkServiceState()
        {
            _qwerkState = new QwerkState();
            _ticks = 0;
            _subscribers = 0;
        }

        [DataMember]
        public QwerkState QwerkState
        {
            get { return _qwerkState; }
            set { _qwerkState = value; }
        }

        [DataMember]
        public long Ticks
        {
            get { return _ticks; }
            set { _ticks = value; }
        }

        [DataMember]
        public int Subscribers
        {
            get { return _subscribers; }
            set { _subscribers = value; }
        }

        [DataMember]
        public short[] AnalogInputs
        {
            get
            {
                return (_qwerkState != null) ? _qwerkState.analogIn.analogInValues : null;
            }
            set { }
        }

        [DataMember]
        public int BatteryVoltage
        {
            get
            {
                return (_qwerkState != null) ? _qwerkState.battery.batteryVoltage : 0;
            }
            set { }
        }

        [DataMember]
        public bool[] Buttons
        {
            get
            {
                return (_qwerkState != null) ? _qwerkState.button.buttonStates : new bool[0];
            }
            set { }
        }

        [DataMember]
        public bool[] DigitalInputs
        {
            get
            {
                return (_qwerkState != null) ? _qwerkState.digitalIn.digitalInStates : new bool[0];
            }
            set { }
        }

        [DataMember]
        public int[] MotorVelocities
        {
            get
            {
                return (_qwerkState != null) ? _qwerkState.motor.motorVelocities : new int[4];
            }
            set { }
        }

        [DataMember]
        public int[] MotorPositions
        {
            get
            {
                return (_qwerkState != null) ? _qwerkState.motor.motorPositions : new int[4];
            }
            set { }
        }

        [DataMember]
        public int[] MotorCurrents
        {
            get
            {
                return (_qwerkState != null) ? _qwerkState.motor.motorCurrents : new int[0];
            }
            set { }
        }

        [DataMember]
        public int[] MotorDutyCycles
        {
            get
            {
                return (_qwerkState != null) ? _qwerkState.motor.motorDutyCycles : new int[0];
            }
            set { }
        }

        [DataMember]
        public bool[] MotorDone
        {
            get
            {
                return (_qwerkState != null) ? _qwerkState.motor.motorDone : new bool[0];
            }
            set { }
        }

        [DataMember]
        public int[] ServoPositions
        {
            get
            {
                return (_qwerkState != null) ? _qwerkState.servo.servoPositions : new int[0];
            }
            set { }
        }
    }

    [DataContract]
    public class VideoFrameMessage
    {
        VideoFrame _frame;

        [DataMember]
        public VideoFrame MyFrame
        {
            get { return _frame; }
            set { _frame = new VideoFrame();
            _frame.ImageData = value.ImageData;
            _frame.Height = value.Height;
            _frame.Width = value.Width;
            }
        }

    }

    [DataContract]
    public class UpdateQwerkStateRequest
    {
    }

    [DataContract]
    public class UpdateInputsRequest
    {
    }
        
     [DataContract]
    public class RelayLoginRequest
    {
        private string terkLogin;
        private string terkPassword;
        private string qwerkLogin;

        [DataMember]
        public string TerkLogin
        {
            get { return terkLogin; }
            set { terkLogin = value; }
        }

        [DataMember]
        public string TerkPassword
        {
            get { return terkPassword; }
            set { terkPassword = value; }
        }
        
        [DataMember]
        public string QwerkLogin
        {
            get { return qwerkLogin; }
            set { qwerkLogin = value; }
        }
    }

    [DataContract]
    public class DirectLoginRequest
    {
        private string peerIdentifier;

        [DataMember]
        public string PeerIdentifier
        {
            get { return peerIdentifier; }
            set { peerIdentifier = value; }
        }        
    }

    [DataContract]
    public class GetVideoFrameRequest
    {
    }

    [DataContract]
    public class SetMotorSpeedRequest
      {
      private int? motor0 = null;
      private int? motor1 = null;
      private int? motor2 = null;
      private int? motor3 = null;

      [DataMember]
      public int? Motor0
         {
         get { return motor0; }
         set { motor0 = value; }
         }

      [DataMember]
      public int? Motor1
         {
         get { return motor1; }
         set { motor1 = value; }
         }

      [DataMember]
      public int? Motor2
         {
         get { return motor2; }
         set { motor2 = value; }
         }

      [DataMember]
      public int? Motor3
         {
         get { return motor3; }
         set { motor3 = value; }
         }
      }
    
    [DataContract]
    public class SetServoPositionsRequest
    {
        private int?[] servoPos = new int?[16];
        private int?[] servoVel = new int?[16];

        [DataMember]
        public int?[] ServoPosArray
        {
            get { return servoPos; }
            set
            {
                if (value.Length != 16)
                    throw new System.ArgumentException("Array must be of size 16");
                for (int i = 0; i < 16; i++)
                {
                    servoPos[i] = value[i];
                }
            }
        }

        [DataMember]
        public int? ServoPos0
        {
            get { return servoPos[0]; }
            set { servoPos[0] = value; }
        }

        [DataMember]
        public int? ServoPos1
        {
            get { return servoPos[1]; }
            set { servoPos[1] = value; }
        }

        [DataMember]
        public int? ServoPos2
        {
            get { return servoPos[2]; }
            set { servoPos[2] = value; }
        }

        [DataMember]
        public int? ServoPos3
        {
            get { return servoPos[3]; }
            set { servoPos[3] = value; }
        }

        [DataMember]
        public int? ServoPos4
        {
            get { return servoPos[4]; }
            set { servoPos[4] = value; }
        }

        [DataMember]
        public int? ServoPos5
        {
            get { return servoPos[5]; }
            set { servoPos[5] = value; }
        }

        [DataMember]
        public int? ServoPos6
        {
            get { return servoPos[6]; }
            set { servoPos[6] = value; }
        }

        [DataMember]
        public int? ServoPos7
        {
            get { return servoPos[7]; }
            set { servoPos[7] = value; }
        }

        [DataMember]
        public int? ServoPos8
        {
            get { return servoPos[8]; }
            set { servoPos[8] = value; }
        }

        [DataMember]
        public int? ServoPos9
        {
            get { return servoPos[9]; }
            set { servoPos[9] = value; }
        }

        [DataMember]
        public int? ServoPos10
        {
            get { return servoPos[10]; }
            set { servoPos[10] = value; }
        }

        [DataMember]
        public int? ServoPos11
        {
            get { return servoPos[11]; }
            set { servoPos[11] = value; }
        }

        [DataMember]
        public int? ServoPos12
        {
            get { return servoPos[12]; }
            set { servoPos[12] = value; }
        }

        [DataMember]
        public int? ServoPos13
        {
            get { return servoPos[13]; }
            set { servoPos[13] = value; }
        }

        [DataMember]
        public int? ServoPos14
        {
            get { return servoPos[14]; }
            set { servoPos[14] = value; }
        }

        [DataMember]
        public int? ServoPos15
        {
            get { return servoPos[15]; }
            set { servoPos[15] = value; }
        }

        [DataMember]
        public int?[] ServoVelArray
        {
            get { return servoVel; }
            set
            {
                if (value.Length != 16)
                    throw new System.ArgumentException("Array must be of size 16");
                for (int i = 0; i < 16; i++)
                {
                    servoVel[i] = value[i];
                }
            }
        }

        [DataMember]
        public int? ServoVel0
        {
            get { return servoVel[0]; }
            set { servoVel[0] = value; }
        }

        [DataMember]
        public int? ServoVel1
        {
            get { return servoVel[1]; }
            set { servoVel[1] = value; }
        }

        [DataMember]
        public int? ServoVel2
        {
            get { return servoVel[2]; }
            set { servoVel[2] = value; }
        }

        [DataMember]
        public int? ServoVel3
        {
            get { return servoVel[3]; }
            set { servoVel[3] = value; }
        }

        [DataMember]
        public int? ServoVel4
        {
            get { return servoVel[4]; }
            set { servoVel[4] = value; }
        }

        [DataMember]
        public int? ServoVel5
        {
            get { return servoVel[5]; }
            set { servoVel[5] = value; }
        }

        [DataMember]
        public int? ServoVel6
        {
            get { return servoVel[6]; }
            set { servoVel[6] = value; }
        }

        [DataMember]
        public int? ServoVel7
        {
            get { return servoVel[7]; }
            set { servoVel[7] = value; }
        }

        [DataMember]
        public int? ServoVel8
        {
            get { return servoVel[8]; }
            set { servoVel[8] = value; }
        }

        [DataMember]
        public int? ServoVel9
        {
            get { return servoVel[9]; }
            set { servoVel[9] = value; }
        }

        [DataMember]
        public int? ServoVel10
        {
            get { return servoVel[10]; }
            set { servoVel[10] = value; }
        }

        [DataMember]
        public int? ServoVel11
        {
            get { return servoVel[11]; }
            set { servoVel[11] = value; }
        }

        [DataMember]
        public int? ServoVel12
        {
            get { return servoVel[12]; }
            set { servoVel[12] = value; }
        }

        [DataMember]
        public int? ServoVel13
        {
            get { return servoVel[13]; }
            set { servoVel[13] = value; }
        }

        [DataMember]
        public int? ServoVel14
        {
            get { return servoVel[14]; }
            set { servoVel[14] = value; }
        }

        [DataMember]
        public int? ServoVel15
        {
            get { return servoVel[15]; }
            set { servoVel[15] = value; }
        }
    }
    
    [DataContract]
    public class SetDigitalOutRequest
    {
        private const int size = 4;
        private bool?[] digitalOut = new bool?[size];

        [DataMember]
        public bool?[] DigitalOutArray
        {
            get { return digitalOut; }
            set
            {
                if (value.Length != size)
                    throw new System.ArgumentException("Array must be of size "+size);
                for (int i = 0; i < size; i++)
                {
                    digitalOut[i] = value[i];
                }
            }
        }

        [DataMember]
        public bool? DigitalOut0
        {
            get { return digitalOut[0]; }
            set { digitalOut[0] = value; }
        }

        [DataMember]
        public bool? DigitalOut1
        {
            get { return digitalOut[1]; }
            set { digitalOut[1] = value; }
        }

        [DataMember]
        public bool? DigitalOut2
        {
            get { return digitalOut[2]; }
            set { digitalOut[2] = value; }
        }

        [DataMember]
        public bool? DigitalOut3
        {
            get { return digitalOut[3]; }
            set { digitalOut[3] = value; }
        }
        /*
        [DataMember]
        public bool? DigitalOut4
        {
            get { return digitalOut[4]; }
            set { digitalOut[4] = value; }
        }

        [DataMember]
        public bool? DigitalOut5
        {
            get { return digitalOut[5]; }
            set { digitalOut[5] = value; }
        }

        [DataMember]
        public bool? DigitalOut6
        {
            get { return digitalOut[6]; }
            set { digitalOut[6] = value; }
        }

        [DataMember]
        public bool? DigitalOut7
        {
            get { return digitalOut[7]; }
            set { digitalOut[7] = value; }
        }*/
    }
   }
